###General configuration
Play has a number of configurable settings. You can configure
    database connection URLs,
    the application secret,
    the HTTP port,
    SSL configuration, and so on.

    @@@ Application.conf file
    The main configuration file that you’ll use is the application.conf file. You can find this file at conf/application.conf within your project.
    The application.conf file is loaded from the classpath at runtime(so errors from this  not captured at compile time)

    you can use the application.conf for common settings,
    but use system properties and environment variables to change settings when you run the application in different environments.

    @@@ Reference.conf file
    Libraries define default settings in reference.conf files.
    These files are stored in the libraries’ JARs—one reference.conf per JAR—and aggregated together at runtime.
    The reference.conf files provide defaults; they are overridden by any settings defined in the application.conf file.
    System properties override settings in application.conf, and application.conf overrides the default settings in the various reference.conf files.

    @@@ Specifying an alternate configuration file
    You can specify an alternative configuration file if needed:Using -Dconfig.resource or -Dconfig.file.
        """ -Dconfig.resource
        This will search for an alternative configuration file in the application classpath
        (you usually provide these alternative configuration files into your application conf/ directory before packaging).
        Play will look into conf/ so you don’t have to add conf/.
        $ /path/to/bin/<project-name> -Dconfig.resource=prod.conf

        """-Dconfig.file
        You can also specify another local configuration file not packaged into the application artifacts using this .
        $ /path/to/bin/<project-name> -Dconfig.file=/opt/conf/prod.conf
        here we have to five the path for new conf file.

    @@@ Referencing one conf file in other
        you can always reference the original configuration file in a new prod.conf file using the include directive, such as:
        include "application.conf"
        you can override values from imported cong file using
        key.to.override=blah

    @@@ Overriding configuration with java system properties
        Sometimes you don’t want to specify another complete configuration file,but just override a bunch of specific keys.
        You can do that by specifying then as Java System properties:
        $ /path/to/bin/<project-name> -Dplay.crypto.secret=abcdefghijk -Ddb.default.password=toto

    @@@ Using environment variables
            You can also reference environment variables from your application.conf file:
            my.key = defaultvalue
            my.key = ${?MY_KEY_ENV}
            Here, the override field my.key = ${?MY_KEY_ENV} simply vanishes if there’s no value for MY_KEY_ENV,
            but if you set an environment variable MY_KEY_ENV for example, it would be used.

    @@@ Specifying the HTTP server address and port using system properties
        You can provide both HTTP port and address easily using system properties.
        The default is to listen on port 9000 at the 0.0.0.0 address (all addresses).
        $ /path/to/bin/<project-name> -Dhttp.port=1234 -Dhttp.address=127.0.0.1

    @@@ Changing the path of RUNNING_PID
        It is possible to change the path to the file that contains the process id of the started application.
        Normally this file is placed in the root directory of your play project,
        however it is advised that you put it somewhere where it will be automatically cleared on restart, such as /var/run:
        Make sure that the directory exists and that the user that runs the Play application has write permission for it.
        $ /path/to/bin/<project-name> -Dpidfile.path=/var/run/play.pid


### Logging configuration
Logging can be configured by creating a logback configuration file.
This can be used by your application through the following means:
    @@@ Bundling a custom logback configuration file with your application
        Create an alternative logback config file called logback.xml and copy that to <app>/conf
        any log level settings in application.conf file will be overridden by this file.

    @@@ Using different logback file in production
        """ Using -Dlogger.resource
            Specify another logback configuration file to be loaded from the classpath in conf/ folder of ur app,
            then use -Dlogger.resource to load that file.
            $ /path/to/bin/<project-name> -Dlogger.resource=conf/prod-logger.xml

        """ Using -Dlogger.file
            Specify another logback configuration file to be loaded from the file system:
            $ /path/to/bin/<project-name> -Dlogger.file=/opt/prod/prod-logger.xml

        """ Using -Dlogger.url
            Specify another logback configuration file to be loaded from an URL:
            $ /path/to/bin/<project-name> -Dlogger.url=http://conf.mycompany.com/logger.xml

### JVM configuration
You can specify any JVM arguments to the application startup script. Otherwise the default JVM settings will be used:
$ /path/to/bin/<project-name> -J-Xms128M -J-Xmx512m -J-server





